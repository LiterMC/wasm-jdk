package jcls

import (
	"strings"
)

// Sources:
//   - https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-4.html#jvms-4.1-200-E.1
//   - https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-4.html#jvms-4.5-200-A.1
//   - https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-4.html#jvms-4.6-200-A.1
type AccessFlag uint16

const (
	// Declared public; may be accessed from outside its package.
	AccPublic AccessFlag = 0x0001
	// Declared private; accessible only within the defining class and other classes belonging to the same nest (ยง5.4.4).
	AccPrivate AccessFlag = 0x0002
	// Declared protected; may be accessed within subclasses.
	AccProtected AccessFlag = 0x0004
	// Declared static.
	AccStatic AccessFlag = 0x0008
	// Declared final; never directly assigned to after object construction (JLS ยง17.5).
	AccFinal AccessFlag = 0x0010
	// Treat superclass methods specially when invoked by the invokespecial instruction.
	AccSuper AccessFlag = 0x0020
	// Declared synchronized; invocation is wrapped by a monitor use.
	AccSynchronized AccessFlag = 0x0020
	// Declared volatile; cannot be cached.
	AccVolatile AccessFlag = 0x0040
	// A bridge method, generated by the compiler.
	AccBridge AccessFlag = 0x0040
	// Declared transient; not written or read by a persistent object manager.
	AccTransient AccessFlag = 0x0080
	// Declared with variable number of arguments.
	AccVarargs AccessFlag = 0x0080
	// Declared native; implemented in a language other than the Java programming language.
	AccNative AccessFlag = 0x0100
	// Is an interface, not a class.
	AccInterface AccessFlag = 0x0200
	// Declared abstract; must not be instantiated.
	AccAbstract AccessFlag = 0x0400
	// Declared synthetic; not present in the source code.
	AccSynthetic AccessFlag = 0x1000
	// Declared as an annotation interface.
	AccAnnotation AccessFlag = 0x2000
	// Declared as an enum class; Declared as an element of an enum class.
	AccEnum AccessFlag = 0x4000
	// Is a module, not a class or interface.
	AccModule AccessFlag = 0x8000
)

func (a AccessFlag) Has(f AccessFlag) bool {
	return a&f != 0
}

func (a AccessFlag) String() string {
	var sb strings.Builder
	if a.Has(AccPublic) {
		sb.WriteString("public ")
	}
	if a.Has(AccPrivate) {
		sb.WriteString("private ")
	}
	if a.Has(AccProtected) {
		sb.WriteString("protected ")
	}
	if a.Has(AccStatic) {
		sb.WriteString("static ")
	}
	if a.Has(AccFinal) {
		sb.WriteString("final ")
	}
	if a.Has(AccSynchronized) {
		sb.WriteString("synchronized/super ")
	}
	if a.Has(AccVolatile) {
		sb.WriteString("volatile/bridge ")
	}
	if a.Has(AccTransient) {
		sb.WriteString("transient/varargs ")
	}
	if a.Has(AccAbstract) {
		sb.WriteString("abstract ")
	}
	if a.Has(AccSynthetic) {
		sb.WriteString("synthetic ")
	}
	if a.Has(AccEnum) {
		sb.WriteString("enum ")
	}
	if a.Has(AccModule) {
		sb.WriteString("module ")
	}
	return sb.String()
}
